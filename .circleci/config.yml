
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
#orbs:
#  sonarqube: ft-circleci-orbs/sonarqube-orb@1.0.0
#  sonarqube: ft-circleci-orbs/sonarqube-orb@1.0.0
commands:
  scan:
    description: |
      This command echos the status of the sonarqube scan.
    parameters:
      engine-version:
        description: The SonarQube scanner version.
        type: string
      pull-request-base:
        description: The pull request base.
        type: string
      pull-request-branch:
        description: The pull request branch.
        type: string
      pull-request-key:
        description: The pull request key.
        type: string
      server-url:
        description: The SonarQube server URL.
        type: string
      system-code:
        description: The Biz-Ops system code.
        type: string
      token:
        description: The SonarQube server token.
        type: string
      organization:
        description: The organization name.
        type: string
    steps:
      - run:
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-<<parameters.engine-version>>-linux.zip
            unzip sonar-scanner-cli-<<parameters.engine-version>>-linux.zip
          name: Install SonarQube Scanner
      - run:
          command: |
            if [ -z <<parameters.pull-request-key>> ]; then
              ./sonar-scanner-<<parameters.engine-version>>-linux/bin/sonar-scanner \
              -Dsonar.projectKey=<<parameters.system-code>> \
              -Dsonar.sources=. \
              -Dsonar.host.url=<<parameters.server-url>> \
              -Dsonar.login=<<parameters.token>> \
              -Dsonar.organization=<<parameters.organization>>
              
            else
              ./sonar-scanner-<<parameters.engine-version>>-linux/bin/sonar-scanner \
              -Dsonar.projectKey=<<parameters.system-code>> \
              -Dsonar.sources=. \
              -Dsonar.host.url=<<parameters.server-url>> \
              -Dsonar.login=<<parameters.token>> \
              -Dsonar.pullrequest.key=<<parameters.pull-request-key>> \
              -Dsonar.pullrequest.branch=<<parameters.pull-request-branch>> \
              -Dsonar.pullrequest.base=<<parameters.pull-request-base>>
            fi
          name: Run SonarQube Scanner
  maven-send-to-sonar:
    description: "Maven send to SonarCloud"
    parameters:
      project-key:
        description: Sonar project key
        default: imarioa_desafio-dio-poo
        type: string
      token:
        description: The SonarQube server token.
        default: $SONAR_TOKEN
        type: string
      organization:
        description: The organization name.
        default: imarioa
        type: string
    steps:
      - run:
          name: "Maven send to Sonar"
          command: |
            if ["${CIRCLE_PULL_REQUEST##*/}" == ""];
            then
              echo "Branch analysis..."
              mvn verify sonar:sonar \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.organization=<<parameters.organization>> \
                -Dsonar.login=<<parameters.token>> \
                -Dsonar.projectKey=<<parameters.project-key>>
            else
              echo "PR analysis..."
              mvn verify sonar:sonar \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.organization=<<parameters.organization>> \
                -Dsonar.login=<<parameters.token>> \
                -Dsonar.projectKey=<<parameters.project-key>> \
                -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} \
                -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} \
                -Dsonar.pullrequest.provider=GitHub \
                -Dsonar.pullrequest.base=master
            fi
executors:
  node:
    description: This is the circleci node docker image.
    docker:
      - image: circleci/node:<<parameters.tag>>
    parameters:
      tag:
        default: "12.16"
        description: The node image version.
        type: string
jobs:
  scan:
    description: |
      This job runs the scan command.
    executor: node
    parameters:
      engine-version:
        default: 4.6.0.2311
        description: The SonarQube scanner version.
        type: string
      pull-request-base:
        default: main
        description: The pull request base.
        type: string
      pull-request-branch:
        default: ${CIRCLE_BRANCH}
        description: The pull request branch.
        type: string
      pull-request-key:
        default: ${CIRCLE_PULL_REQUEST##*/}
        description: The pull request key.
        type: string
      server-url:
        default: https://sonarcloud.io/
        description: The SonarQube server URL.
        type: string
      system-code:
        description: The Biz-Ops system code.
        type: string
      token:
        default: $SONAR_TOKEN
        description: The SonarQube server token.
        type: string
      organization:
        default: imarioa
        description: The organization name.
        type: string
    steps:
      - checkout
      - scan:
          engine-version: <<parameters.engine-version>>
          pull-request-base: <<parameters.pull-request-base>>
          pull-request-branch: <<parameters.pull-request-branch>>
          pull-request-key: <<parameters.pull-request-key>>
          server-url: <<parameters.server-url>>
          system-code: <<parameters.system-code>>
          token: <<parameters.token>>
          organization: <<parameters.organization>>
  scan-mvn:
    docker:
      - image: cimg/openjdk:20.0.1
    steps:
      - checkout
      - maven-send-to-sonar


  build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "Build realizado"

  UnitTest:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "Unit Test realizado"
  
  FrontTest:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "Front Test realizado"
  
  SanityTest:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "Sanity Test realizado"
  
  RegressionTest:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "Regression Test realizado"

workflows:
  test-workflow:
    jobs:
      - build
      - UnitTest:
          requires:
            - build
      - FrontTest:
          requires:
            - build
      - SanityTest:
          requires:
            - UnitTest
            - FrontTest
      - RegressionTest:
          requires:
            - SanityTest
      - scan-mvn



